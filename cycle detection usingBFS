#include <bits/stdc++.h>
#include<unordered_map>
#include<queue>


bool iscyclic(int src,unordered_map<int,bool>&vis,unordered_map<int,list<int>>&adj){
    unordered_map <int,int>parent;
    parent[src]=-1;
    vis[src]=1;
    queue<int>q;
    q.push(src);
    while(!q.empty()){
        int fornt=q.front();
        q.pop();


        for(auto neighbour:adj[fornt]){
            if(vis[neighbour]==1 && neighbour!=parent[fornt]){
                return 1;
            } else if (!vis[neighbour]) {
              q.push(neighbour);
              vis[neighbour] = 1;
              parent[neighbour] = fornt;
            }
        }
    }
    return 0;
}
    



string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    unordered_map<int,list<int>>adj;
    for(int i =0;i<m;i++){
        int u =edges[i][0];
        int v= edges[i][1];

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    // disconnected ele

    unordered_map<int,bool>vis;
    for(int i= 0;i<n;i++){
        if(!vis[i]){
            bool cycle= iscyclic(i,vis,adj);
            if (cycle == 1) {
              return "Yes";
            }
        }
    }

        return "No";
    }

